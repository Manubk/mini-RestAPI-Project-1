
Usefull file or BLUE PRINT of Project
#############

Requirment
-----------
	-> Spring-Boot-3.0.6
	-> Jdk - 17
	-> Swaager (To test and document the RestApi) 

step-1
-------- 
	-> analyse database table designe based on requirment
	
		-> TABLE-1 PLAN_CATEGORY
			->CATEGORY_ID		INTEGER
			->CATEGORY_NAME		VARCHAR
			->ACTIVE_SW			VARCHAR	
			->CREATED_DATE		VARCHAR
			->UPDATED_DATE		VARCHAR
			->CREATED_BY		VARCHAR
			->UPDATED_BY		VARCHAR	
			
		-> TABLE-2 PLAN
			->PLAN_ID			INTEGER
			->PLAN_NAME			VARCHAR
			->PLAN_START_DATE	VARCHAR
			->PLAN_END_DATE		VARCHAR
			->CREATED_DATE		VARHCAR
			->UPDATED_DATE		-"-
			->CREATED_BY		-"-
			->UPDATED_BY		-"-
			
step - 2
----------
	-> opean spring starter tool
			-> select
			->spring web
			->spring data JPA
			->spring devapps
			->lombok (we should download and instal lombok to out ide then add the dependencies)
			->mysql driver
			->h2 database
	-> finish
	
step - 3
----------
	->create required classes
		->@Entity
			->Plan
			->PlanCatogery
			
		->@controller
			->PlanController
				-> some common anotations
					->@RestController (indecates that class is a restController)
					->@PathVariable (that defines the url path variable to the parameter)
					->@RequestBody (This will map the incomming json values to java objects)
					->@GetMapping, @PostMapping, @PutMapping, @DeleteMapping.
		
		->@service	(Business Logic)
			->IPlanService
				->public Map<Integer,String> getAllCatogerys();
				->public List<Plan> getAllPlans();
				->public Plan save(Plan plan);
				->public Plan getPlanById(Integer id);
				->public boolean deleteById(Integer id);
				->public boolean changeStatus(Integer id , String val);
			->PlanserviceImpl
		
		->@Repository
			->PlanCategoryRepo
			->PlanRepo
			
		-> AppProperties
			->AppMessages.clss  (which gets the messages from yaml file)
			
		-> constants
			->AppConstants.class (this contains the key of massages )
		
			

step - 4
---------
	->configure aplication.properties file for ur database
		spring.datasource.url=jdbc:h2:mem:testdb
		spring.datasource.username=manu
		spring.datasource.password=manu
		spring.datasource.driver-class-name=org.h2.Driver
		spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

step - 5
---------
	-> use Swagger to test and document the API
		-> for spring- boot 3.0.1
		-> use this swagger dependincy 
		<dependency>
   			 <groupId>org.springdoc</groupId>
    			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    			<version>2.0.2</version>
		</dependency>
	-> api documentation in url:port/swagger-ui/index.html#/
	
 ---------------	here out mini api project is completed  ---------------------------
 
 

version - 2 optimising the code
---------
	
	-> no hardcode String messages should be present in the class
		-> place all the masseges in appication.properties or application.yaml file 
		-> crate a class to store the massages from properties file or yaml file
		-> create a class to access msg from yaml
		@Data
		@EnableConfigurationProperties
		@ConfigurationProperties(prefix = "app-msgs")
		@Configuration
		public class AppMassages {
	
			private Map<String, String> messages = new HashMap<>();
	
		}
		
	-> create a constant massages class
		->AppConstants
			
		

#Tips
------
-> returning ResponseEntity<>()
-> using @creationtimeStamp hibernate property to store createtion data
-> using @updationTimeStamp to store updation time stamp
-> using Return type as LocalDate
		
		 
		